// src/app/api/draw/import/route.ts
import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

// Force dynamic so Netlify/Next won’t cache this route
export const dynamic = "force-dynamic";

// Table row shape used for reading/writing via Supabase
export type RawRow = {
  id: string;                 // uuid (generated by DB)
  created_at: string | null;  // timestamptz
  seed: string | null;        // text
  winners: unknown | null;    // jsonb (array of 3 names)
  full_order: string | null;  // text (optional string of all names)
  ticket_url: string | null;  // text (official ticket URL)
};

// Minimal payload accepted from the UI (you can extend as needed)
type ImportPayload = {
  adminKey?: string;
  winners: string[];         // exactly 3 winners preferred
  fullOrder?: string;        // optional: comma-or-newline-separated list
  seed?: string;             // optional
  ticketUrl?: string;        // optional: the RandomResult ticket link
};

function getSupabaseAdmin() {
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
  const key = process.env.SUPABASE_SERVICE_ROLE_KEY!;
  if (!url || !key) {
    throw new Error("Supabase env not set (URL or SERVICE_ROLE_KEY missing).");
  }
  return createClient(url, key, { auth: { persistSession: false } });
}

function ok<T>(data: T, init?: number) {
  return NextResponse.json({ ok: true, data }, { status: init ?? 200 });
}
function fail(message: string, init?: number) {
  return NextResponse.json({ ok: false, error: message }, { status: init ?? 400 });
}

export async function POST(req: Request) {
  try {
    // Parse body
    const body = (await req.json()) as ImportPayload;

    // Admin key – either header or body
    const headerKey = req.headers.get("x-admin-key") ?? undefined;
    const providedKey = body.adminKey ?? headerKey ?? "";
    const adminKey = process.env.ADMIN_KEY ?? "";

    if (!adminKey) {
      return fail("Server missing ADMIN_KEY env var.", 500);
    }
    if (providedKey !== adminKey) {
      return fail("Invalid admin key.", 401);
    }

    // Basic validation
    if (!Array.isArray(body.winners) || body.winners.length === 0) {
      return fail("Payload must include 'winners' (array).");
    }
    // Store the winners array as-is; DB column is jsonb
    const winners = body.winners;

    const insertPayload = {
      seed: body.seed ?? null,
      winners, // jsonb
      full_order: body.fullOrder ?? null,
      ticket_url: body.ticketUrl ?? null,
    };

    const supabase = getSupabaseAdmin();

    // INSERT and return the inserted row
    const { data, error } = await supabase
      .from<RawRow>("prize_draws")
      .insert(insertPayload)
      .select("id, created_at, seed, winners, full_order, ticket_url")
      .single();

    if (error) {
      return fail(`Insert failed: ${error.message}`, 500);
    }

    return ok({
      id: data!.id,
      created_at: data!.created_at,
      seed: data!.seed,
      winners: data!.winners,
      full_order: data!.full_order,
      ticket_url: data!.ticket_url,
    });
  } catch (err: any) {
    return fail(err?.message ?? "Unexpected error.", 500);
  }
}

// Optional: simple GET that returns the most recent import
export async function GET() {
  try {
    const supabase = getSupabaseAdmin();
    const { data, error } = await supabase
      .from<RawRow>("prize_draws")
      .select("id, created_at, seed, winners, full_order, ticket_url")
      .order("created_at", { ascending: false })
      .limit(1);

    if (error) return fail(`Fetch failed: ${error.message}`, 500);
    if (!data || data.length === 0) return ok(null); // none yet

    return ok(data[0]);
  } catch (err: any) {
    return fail(err?.message ?? "Unexpected error.", 500);
  }
}